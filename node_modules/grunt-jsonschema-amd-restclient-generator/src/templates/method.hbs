{{module_name}}.prototype.{{rel}} = function(config) {
    config = $.extend(true, {}, this.CONFIG, config || {});
    config = this.apply_{{rel}}_defaults(config);
    var z, i, s;
    for (z = 0; z <= Object.keys(config).length; z += 1) {
        if (Array.isArray(config[Object.keys(config)[z]])) {
            s = '[';
            for (i = 0; i < config[Object.keys(config)[z]].length; i += 1) {
                s += config[Object.keys(config)[z]][i];
                if (i < config[Object.keys(config)[z]].length - 1) {
                    s += ', ';
                }
            }
            s += ']';
            config[Object.keys(config)[z]] = s;
        }
    }
    if (this.is_valid_{{rel}}(config)) {
        {{#if q}}
            return Q($.ajax({
                url: this.CONFIG.base_url + {{{url}}},
                data: {{{data}}},
                type: {{{method}}}
            }));
        {{else}}
            $.ajax({
                url: this.CONFIG.base_url + {{{url}}},
                data: {{{data}}},
                type: {{{method}}},
                success: config.success,
                error: config.error,
                context: config.context,
                always: config.always
            });
        {{/if}}
    }
    throw 400;
};

{{module_name}}.prototype.is_valid_{{rel}} = function(config) {
    var parameters = [{{{parameters}}}], i;
    for (i = 0; i < parameters.length; i += 1) {
        if (config[parameters[i]] === undefined) {
            throw 'Parameter "' + parameters[i] + '" is undefined. Please check your request.';
        }
    }
    return true;
};

{{module_name}}.prototype.apply_{{rel}}_defaults = function (config) {
    var i,
        parameters = [{{{parameters}}}],
        defaults = {
            {{{defaults}}}
        },
        key;
    for (i = 0; i < parameters.length; i += 1) {
        key =  parameters[i];
        try {
            config[key] = config[key] !== undefined ? config[key] : defaults[key];
        } catch (ignore) {
            /* No default value available for this parameter. */
        }
    }
    return config;
};
